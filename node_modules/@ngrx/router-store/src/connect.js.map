{"version":3,"file":"connect.js","sourceRoot":"","sources":["../../src/connect.ts"],"names":[],"mappings":"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","sourcesContent":["import { Location } from '@angular/common';\nimport { Router, Event, NavigationEnd, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { _do } from 'rxjs/operator/do';\nimport { filter } from 'rxjs/operator/filter';\nimport { distinctUntilChanged } from 'rxjs/operator/distinctUntilChanged';\nimport { map } from 'rxjs/operator/map';\nimport { withLatestFrom } from 'rxjs/operator/withLatestFrom';\nimport { Store, Action } from '@ngrx/store';\nimport { select } from '@ngrx/core';\n\nimport { RouterMethodCall, routerActions, routerActionTypes } from './actions';\n\nexport function listenForRouterMethodActions(router: Router, location: Location, actions$: Observable<Action>) {\n  filter.call(actions$, action => routerActionTypes.indexOf(action.type) > -1)\n    .subscribe(action => {\n      const { path, query: queryParams, extras = {} }: RouterMethodCall = action.payload;\n      let commands: any[] = Array.isArray(path) ? path : [path];\n\n      switch (action.type) {\n        case routerActions.GO:\n          router.navigate(commands, Object.assign({}, extras, { queryParams }));\n          break;\n\n        case routerActions.REPLACE:\n          router.navigate(commands, Object.assign({}, extras, { queryParams, replaceUrl: true }));\n          break;\n\n        case routerActions.SEARCH:\n          let urlTree: UrlTree = router.parseUrl(router.url);\n          urlTree.queryParams = queryParams;\n          router.navigateByUrl(urlTree, extras);\n          break;\n\n        case routerActions.SHOW:\n          router.navigate(commands, Object.assign({}, extras, { queryParams, skipLocationChange: true }));\n          break;\n\n        case routerActions.BACK:\n          location.back();\n          break;\n\n        case routerActions.FORWARD:\n          location.forward();\n          break;\n      }\n    });\n}\n\nexport function selectRouter(store: Store<any>) {\n  return select.call(store, (state) => state.router);\n}\n\nexport function getLatestUrl(router: Router): Observable<string> {\n  const navigationEnd$ = filter.call(router.events, (event: Event) => event instanceof NavigationEnd);\n  const navigationEndUrl$ = select.call(navigationEnd$, () => router.url);\n\n  return navigationEndUrl$;\n}\n\nexport function connectRouterActions(router: Router, store: Store<any>) {\n  const routerAndStore$ = withLatestFrom.call(getLatestUrl(router), selectRouter(store));\n  const mismatchUrl$ = filter.call(routerAndStore$, ([ url, rs ]) => (rs && rs.path !== url || !rs));\n  const updateLocation$ = map.call(mismatchUrl$, ([ path ]) => {\n    return { type: routerActions.UPDATE_LOCATION, payload: { path }};\n  });\n\n  updateLocation$.subscribe(store);\n}\n\nexport function listenForStoreChanges(router: Router, store: Store<any>) {\n  const storeAndRouter$ = withLatestFrom.call(selectRouter(store), getLatestUrl(router));\n  const mismatch$ = filter.call(storeAndRouter$, ([ rs, url ]) => rs.path !== url);\n  const newPath$ = map.call(mismatch$, ([ rs ]) => rs.path);\n\n  newPath$.subscribe(url => router.navigateByUrl(url));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}