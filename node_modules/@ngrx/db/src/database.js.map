{"version":3,"sources":["../../src/database.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAG7C,OAAO,EAAE,OAAA,EAAQ,MAAO,cAAA,CAAe;AACvC,OAAO,EAAE,QAAA,EAAS,MAAO,wBAAA,CAAyB;AAElD,OAAO,EAAE,GAAA,EAAI,MAAO,kBAAA,CAAmB;AACvC,OAAO,EAAE,IAAA,EAAK,MAAO,sBAAA,CAAuB;AAC5C,OAAO,EAAE,cAAA,EAAgB,MAAA,EAAQ,UAAA,EAAY,QAAA,EAA8B,MAAO,eAAA,CAAgB;AAGlG,IAAM,WAAA,GAAc,SAAA,CAAU;AAC9B,IAAM,YAAA,GAAe,UAAA,CAAW;AAChC,IAAM,SAAA,GAAY,OAAA,CAAQ;AAC1B,IAAM,kBAAA,GAAqB,eAAA,CAAgB;AAE3C,IAAM,YAAA,GAAe,UAAA,CAAW;AAChC,IAAM,iBAAA,GAAoB,WAAA,CAAY;AAEtC,MAAM,CAAC,IAAM,SAAA,GAAY,WAAA,CAAY;AAErC,MAAM,CAAC,IAAM,eAAA,GAAkB,IAAI,cAAA,CAAe,kBAAC,CAAkB,CAAC;AACtE,MAAM,CAAC,IAAM,UAAA,GAAa,IAAI,cAAA,CAAe,YAAC,CAAY,CAAC;AAiB3D,MAAM;IACJ,MAAM,CAAC,OAAO,MAAA,KAAW,WAAA,GAAc,MAAA,CAAO,SAAC,GAAW,IAAA,CAAK,SAAC,CAAS;AAC3E,CAAC;AAGD;IAOE,kBAAa,UAAe,EAAG,MAAW;QALnC,YAAO,GAAiB,IAAI,OAAO,EAAE,CAAC;QAM3C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;IACzB,CAAC;IAEO,6BAAU,GAAlB,UAAmB,YAAqB;QACtC,MAAM,CAAC,UAAC,aAAkB;YACxB,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC7B,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;YACvD,CAAC;YACD,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;QAC9B,CAAC,CAAC;IACJ,CAAC;IAEO,6BAAU,GAAlB,UAAmB,QAA+B,EAAE,EAAe;QACjE,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC5C,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAClC,CAAC;YACD,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QACzE,CAAC;QACD,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;IACtB,CAAC;IAEO,qCAAkB,GAA1B,UAA2B,EAAe,EAAE,GAAW,EAAE,MAAe;QACtE,IAAI,WAAW,GAAG,EAAE,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAC,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,UAAU,EAAC,CAAC,CAAC;IACjG,CAAC;IAED,uBAAI,GAAJ,UAAK,MAAc,EAAE,OAAmB,EAAE,cAAiC;QAA3E,iBA8BC;QA9BoB,wBAAA,EAAA,WAAmB;QACtC,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAE/C,IAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEvD,IAAM,SAAS,GAAG,UAAC,KAAU;gBAC3B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACnC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACtB,CAAC,CAAC;YACF,IAAM,OAAO,GAAG,UAAC,GAAQ;gBACvB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC,CAAC;YAEF,IAAM,eAAe,GAAG,UAAC,KAAU;gBACjC,KAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACjD,CAAC,CAAC;YAEF,OAAO,CAAC,gBAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACjD,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7C,OAAO,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;YAE9D,MAAM,CAAC;gBACL,OAAO,CAAC,mBAAmB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;gBACpD,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAChD,OAAO,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;YACnE,CAAC,CAAC;QAEJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iCAAc,GAAd,UAAe,MAAc;QAA7B,iBAoBC;QAnBC,MAAM,CAAC,IAAI,UAAU,CAAC,UAAC,gBAA+B;YAEpD,IAAM,aAAa,GAAG,KAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAEvD,IAAM,SAAS,GAAG,UAAC,KAAU;gBAC3B,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5B,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YAC9B,CAAC,CAAC;YAEF,IAAM,OAAO,GAAG,UAAC,GAAQ,IAAK,OAAA,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,EAA3B,CAA2B,CAAC;YAE1D,aAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACvD,aAAa,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAEnD,MAAM,CAAC;gBACL,aAAa,CAAC,mBAAmB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;gBAC1D,aAAa,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACxD,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,yBAAM,GAAN,UAAO,SAAiB,EAAE,OAAc,EAAE,MAAsB;QAAhE,iBAIC;QAJyC,uBAAA,EAAA,aAAsB;QAC9D,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAE5D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,OAAY,IAAK,OAAA,MAAM,GAAG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,SAAS,EAAE,OAAO,SAAA,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAA9D,CAA8D,CAAC,CAAC;IAC5G,CAAC;IAED,sBAAG,GAAH,UAAI,SAAiB,EAAE,GAAQ;QAA/B,iBA+BC;QA9BC,IAAM,KAAK,GAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE5C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,EAAe;YACxC,MAAM,CAAC,IAAI,UAAU,CAAC,UAAC,WAA0B;gBAChD,IAAM,YAAY,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACpD,IAAM,MAAM,GAAG,KAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;gBAC7C,IAAM,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE,YAAY,CAAC,CAAC;gBACtD,IAAM,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAE/C,IAAM,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAExC,IAAM,UAAU,GAAG,UAAC,GAAQ,IAAK,OAAA,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC;gBACxD,IAAM,aAAa,GAAG,cAAM,OAAA,WAAW,CAAC,QAAQ,EAAE,EAAtB,CAAsB,CAAC;gBACnD,IAAM,aAAa,GAAG,UAAC,EAAO,IAAK,OAAA,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAnC,CAAmC,CAAC;gBAEvE,GAAG,CAAC,gBAAgB,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;gBAClD,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAE5C,UAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;gBACxD,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAEnD,MAAM,CAAC;oBACL,UAAU,CAAC,mBAAmB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;oBAC3D,UAAU,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBACtD,GAAG,CAAC,mBAAmB,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;oBACrD,GAAG,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBACjD,CAAC,CAAC;YAEH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wBAAK,GAAL,UAAM,SAAiB,EAAE,SAAiC;QACxD,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,EAAe;YACxC,MAAM,CAAC,IAAI,UAAU,CAAC,UAAC,WAA0B;gBAChD,IAAM,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE,YAAY,CAAC,CAAC;gBACtD,IAAM,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAE/C,IAAM,UAAU,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;gBAE5C,IAAM,UAAU,GAAG,UAAC,GAAQ,IAAK,OAAA,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC;gBACxD,IAAM,aAAa,GAAG,UAAC,EAAO;oBAC5B,IAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACX,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACd,IAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BACtC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACV,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BACjC,CAAC;wBACH,CAAC;wBACD,IAAI,CAAC,CAAC;4BACJ,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBACjC,CAAC;wBACD,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACpB,CAAC;oBACD,IAAI,CAAC,CAAC;wBACJ,WAAW,CAAC,QAAQ,EAAE,CAAC;oBACzB,CAAC;gBACH,CAAC,CAAC;gBAEF,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAE5C,UAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;gBACxD,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAEnD,MAAM,CAAC;oBACL,UAAU,CAAC,mBAAmB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;oBAC3D,UAAU,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;oBACtD,GAAG,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBACjD,CAAC,CAAC;YAEH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+BAAY,GAAZ,UAAa,SAAiB,EAAE,UAAkB,EAAE,OAAc;QAAlE,iBAiDC;QAhDC,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,EAAe;YACxC,MAAM,CAAC,IAAI,UAAU,CAAC,UAAC,WAA0B;gBAC/C,IAAM,YAAY,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACpD,IAAM,MAAM,GAAG,KAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;gBAC7C,IAAM,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE,iBAAiB,CAAC,CAAC;gBAC3D,IAAM,WAAW,GAAQ,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEpD,IAAM,UAAU,GAAG,UAAC,GAAQ,IAAK,OAAA,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC;gBACxD,IAAM,aAAa,GAAG,cAAM,OAAA,WAAW,CAAC,QAAQ,EAAE,EAAtB,CAAsB,CAAC;gBAEnD,GAAG,CAAC,gBAAgB,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;gBAClD,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAE5C,IAAM,WAAW,GAAG,UAAC,MAAW;oBAC9B,MAAM,CAAC,IAAI,UAAU,CAAC,UAAC,WAA0B;wBAC/C,IAAI,GAAQ,CAAC;wBACb,EAAE,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;4BAC5B,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC;wBACxC,CAAC;wBACD,IAAI,CAAC,CAAC;4BACJ,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;4BAC1B,IAAI,OAAO,GAAI,MAAc,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;4BACjD,OAAO,OAAO,CAAC,GAAG,CAAC;4BACnB,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;wBAC/C,CAAC;wBACD,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE;4BAChC,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC;4BACtB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,IAAI,MAAA,EAAE,MAAM,QAAA,EAAC,CAAC,CAAC,CAAC;wBAC3C,CAAC,CAAC,CAAC;wBACH,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,GAAQ;4BACvC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACzB,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC;gBAEF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,WAAW,CAAC;qBAC9D,SAAS,CAAC,WAAW,CAAC,CAAC;gBAE1B,MAAM,CAAC;oBACL,iBAAiB,CAAC,WAAW,EAAE,CAAC;oBAChC,GAAG,CAAC,mBAAmB,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;oBACrD,GAAG,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBACjD,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0BAAO,GAAP,UAAQ,CAAM,EAAE,CAAM;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B,CAAC;IASH,eAAC;AAAD,CA5OA,AA4OC;;AARM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAG,EAAC;IAC9E,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAG,EAAC;CACxE,EAH6F,CAG7F,CAAC;AAKF;IAAA;IAoBA,CAAC;IAnBQ,kBAAS,GAAhB,UAAiB,MAAgB;QAC/B,MAAM,CAAC;YACL,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE;aAC1C;SACF,CAAC;IACJ,CAAC;IAYH,eAAC;AAAD,CApBA,AAoBC;;AAXM,mBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvB,SAAS,EAAE;oBACT,QAAQ;oBACR,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,aAAa,EAAE;iBACxD;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"database.js","sourceRoot":"","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { Subject } from 'rxjs/Subject';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { map } from 'rxjs/operator/map';\nimport { _do } from 'rxjs/operator/do';\nimport { from } from 'rxjs/observable/from';\nimport { InjectionToken, Inject, Injectable, NgModule, ModuleWithProviders } from '@angular/core';\n\n\nconst IDB_SUCCESS = 'success';\nconst IDB_COMPLETE = 'complete';\nconst IDB_ERROR = 'error';\nconst IDB_UPGRADE_NEEDED = 'upgradeneeded';\n\nconst IDB_TXN_READ = 'readonly';\nconst IDB_TXN_READWRITE = 'readwrite';\n\nexport const DB_INSERT = 'DB_INSERT';\n\nexport const DatabaseBackend = new InjectionToken('IndexedDBBackend');\nexport const IDB_SCHEMA = new InjectionToken('IDB_SCHEMA');\n\nexport interface DBUpgradeHandler {\n  (db: IDBDatabase): void;\n}\n\nexport interface DBStore {\n  primaryKey?: string;\n  autoIncrement?: boolean;\n}\n\nexport interface DBSchema {\n  version: number;\n  name: string;\n  stores: {[storename: string]: DBStore};\n}\n\nexport function getIDBFactory(): IDBFactory {\n  return typeof window !== 'undefined' ? window.indexedDB : self.indexedDB;\n}\n\n\nexport class Database {\n\n  public changes: Subject<any> = new Subject();\n\n  private _idb: IDBFactory;\n  private _schema: DBSchema;\n\n  constructor( idbBackend: any,  schema: any) {\n    this._schema = schema;\n    this._idb = idbBackend;\n  }\n\n  private _mapRecord(objectSchema: DBStore) {\n    return (dbResponseRec: any) => {\n      if (!objectSchema.primaryKey) {\n        dbResponseRec.record['$key'] = dbResponseRec['$key'];\n      }\n      return dbResponseRec.record;\n    };\n  }\n\n  private _upgradeDB(observer: Observer<IDBDatabase>, db: IDBDatabase) {\n    for (let storeName in this._schema.stores) {\n      if (db.objectStoreNames.contains(storeName)) {\n        db.deleteObjectStore(storeName);\n      }\n      this._createObjectStore(db, storeName, this._schema.stores[storeName]);\n    }\n    observer.next(db);\n    observer.complete();\n  }\n\n  private _createObjectStore(db: IDBDatabase, key: string, schema: DBStore) {\n    let objectStore = db.createObjectStore(key, {autoIncrement: true, keyPath: schema.primaryKey});\n  }\n\n  open(dbName: string, version: number = 1, upgradeHandler?: DBUpgradeHandler): Observable<IDBDatabase> {\n    const idb = this._idb;\n    return Observable.create((observer: Observer<any>) => {\n\n      const openReq = idb.open(dbName, this._schema.version);\n\n      const onSuccess = (event: any) => {\n        observer.next(event.target.result);\n        observer.complete();\n      };\n      const onError = (err: any) => {\n        console.log(err);\n        observer.error(err);\n      };\n\n      const onUpgradeNeeded = (event: any) => {\n        this._upgradeDB(observer, event.target.result);\n      };\n\n      openReq.addEventListener(IDB_SUCCESS, onSuccess);\n      openReq.addEventListener(IDB_ERROR, onError);\n      openReq.addEventListener(IDB_UPGRADE_NEEDED, onUpgradeNeeded);\n\n      return () => {\n        openReq.removeEventListener(IDB_SUCCESS, onSuccess);\n        openReq.removeEventListener(IDB_ERROR, onError);\n        openReq.removeEventListener(IDB_UPGRADE_NEEDED, onUpgradeNeeded);\n      };\n\n    });\n  }\n\n  deleteDatabase(dbName: string): Observable<any> {\n    return new Observable((deletionObserver: Observer<any>) => {\n\n      const deleteRequest = this._idb.deleteDatabase(dbName);\n\n      const onSuccess = (event: any) => {\n        deletionObserver.next(null);\n        deletionObserver.complete();\n      };\n\n      const onError = (err: any) => deletionObserver.error(err);\n\n      deleteRequest.addEventListener(IDB_SUCCESS, onSuccess);\n      deleteRequest.addEventListener(IDB_ERROR, onError);\n\n      return () => {\n        deleteRequest.removeEventListener(IDB_SUCCESS, onSuccess);\n        deleteRequest.removeEventListener(IDB_ERROR, onError);\n      };\n    });\n  }\n\n  insert(storeName: string, records: any[], notify: boolean = true): Observable<any> {\n    const write$ = this.executeWrite(storeName, 'put', records);\n\n    return _do.call(write$, (payload: any) => notify ? this.changes.next({type: DB_INSERT, payload }) : ({}));\n  }\n\n  get(storeName: string, key: any): Observable<any> {\n    const open$ =  this.open(this._schema.name);\n\n    return mergeMap.call(open$, (db: IDBDatabase) => {\n        return new Observable((txnObserver: Observer<any>) => {\n         const recordSchema = this._schema.stores[storeName];\n         const mapper = this._mapRecord(recordSchema);\n         const txn = db.transaction([storeName], IDB_TXN_READ);\n         const objectStore = txn.objectStore(storeName);\n\n         const getRequest = objectStore.get(key);\n\n         const onTxnError = (err: any) => txnObserver.error(err);\n         const onTxnComplete = () => txnObserver.complete();\n         const onRecordFound = (ev: any) => txnObserver.next(getRequest.result);\n\n         txn.addEventListener(IDB_COMPLETE, onTxnComplete);\n         txn.addEventListener(IDB_ERROR, onTxnError);\n\n         getRequest.addEventListener(IDB_SUCCESS, onRecordFound);\n         getRequest.addEventListener(IDB_ERROR, onTxnError);\n\n         return () => {\n           getRequest.removeEventListener(IDB_SUCCESS, onRecordFound);\n           getRequest.removeEventListener(IDB_ERROR, onTxnError);\n           txn.removeEventListener(IDB_COMPLETE, onTxnComplete);\n           txn.removeEventListener(IDB_ERROR, onTxnError);\n         };\n\n        });\n      });\n  }\n\n  query(storeName: string, predicate?: (rec: any) => boolean): Observable<any> {\n    const open$ = this.open(this._schema.name);\n\n    return mergeMap.call(open$, (db: IDBDatabase) => {\n        return new Observable((txnObserver: Observer<any>) => {\n         const txn = db.transaction([storeName], IDB_TXN_READ);\n         const objectStore = txn.objectStore(storeName);\n\n         const getRequest = objectStore.openCursor();\n\n         const onTxnError = (err: any) => txnObserver.error(err);\n         const onRecordFound = (ev: any) => {\n           let cursor = ev.target.result;\n           if (cursor) {\n             if (predicate) {\n               const match = predicate(cursor.value);\n               if (match) {\n                 txnObserver.next(cursor.value);\n               }\n             }\n             else {\n               txnObserver.next(cursor.value);\n             }\n             cursor.continue();\n           }\n           else {\n             txnObserver.complete();\n           }\n         };\n\n         txn.addEventListener(IDB_ERROR, onTxnError);\n\n         getRequest.addEventListener(IDB_SUCCESS, onRecordFound);\n         getRequest.addEventListener(IDB_ERROR, onTxnError);\n\n         return () => {\n           getRequest.removeEventListener(IDB_SUCCESS, onRecordFound);\n           getRequest.removeEventListener(IDB_ERROR, onTxnError);\n           txn.removeEventListener(IDB_ERROR, onTxnError);\n         };\n\n        });\n      });\n  }\n\n  executeWrite(storeName: string, actionType: string, records: any[]): Observable<any> {\n    const changes = this.changes;\n    const open$ = this.open(this._schema.name);\n\n    return mergeMap.call(open$, (db: IDBDatabase) => {\n        return new Observable((txnObserver: Observer<any>) => {\n          const recordSchema = this._schema.stores[storeName];\n          const mapper = this._mapRecord(recordSchema);\n          const txn = db.transaction([storeName], IDB_TXN_READWRITE);\n          const objectStore: any = txn.objectStore(storeName);\n\n          const onTxnError = (err: any) => txnObserver.error(err);\n          const onTxnComplete = () => txnObserver.complete();\n\n          txn.addEventListener(IDB_COMPLETE, onTxnComplete);\n          txn.addEventListener(IDB_ERROR, onTxnError);\n\n          const makeRequest = (record: any) => {\n            return new Observable((reqObserver: Observer<any>) => {\n              let req: any;\n              if (recordSchema.primaryKey) {\n                req = objectStore[actionType](record);\n              }\n              else {\n                let $key = record['$key'];\n                let $record = (Object as any).assign({}, record);\n                delete $record.key;\n                req = objectStore[actionType]($record, $key);\n              }\n              req.addEventListener(IDB_SUCCESS, () => {\n                let $key = req.result;\n                reqObserver.next(mapper({$key, record}));\n              });\n              req.addEventListener(IDB_ERROR, (err: any) => {\n                reqObserver.error(err);\n              });\n            });\n          };\n\n          let requestSubscriber = mergeMap.call(from(records), makeRequest)\n            .subscribe(txnObserver);\n\n          return () => {\n            requestSubscriber.unsubscribe();\n            txn.removeEventListener(IDB_COMPLETE, onTxnComplete);\n            txn.removeEventListener(IDB_ERROR, onTxnError);\n          };\n        });\n      });\n  }\n\n  compare(a: any, b: any): number {\n    return this._idb.cmp(a, b);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DatabaseBackend, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [IDB_SCHEMA, ] }, ]},\n];\n}\n\n\n\nexport class DBModule {\n  static provideDB(schema: DBSchema): ModuleWithProviders {\n    return {\n      ngModule: DBModule,\n      providers: [\n        { provide: IDB_SCHEMA, useValue: schema }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    Database,\n    { provide: DatabaseBackend, useFactory: getIDBFactory }\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}